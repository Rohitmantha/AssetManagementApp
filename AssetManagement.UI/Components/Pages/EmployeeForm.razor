@page "/employees/add"
@page "/employees/edit/{id:int}"
@rendermode InteractiveServer
@using AssetManagement.Business.Interfaces
@using AssetManagement.Models
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>@pageTitle - Asset Management</PageTitle>

<h3>@pageTitle</h3>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="fullName" class="form-label">Full Name *</label>
                        <InputText id="fullName" class="form-control" @bind-Value="employee.FullName" />
                        <ValidationMessage For="@(() => employee.FullName)" />
                    </div>

                    <div class="mb-3">
                        <label for="department" class="form-label">Department *</label>
                        <InputText id="department" class="form-control" @bind-Value="employee.Department" />
                        <ValidationMessage For="@(() => employee.Department)" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email *</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="employee.Email" />
                        <ValidationMessage For="@(() => employee.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <InputText id="phone" class="form-control" @bind-Value="employee.PhoneNumber" />
                        <ValidationMessage For="@(() => employee.PhoneNumber)" />
                    </div>

                    <div class="mb-3">
                        <label for="designation" class="form-label">Designation</label>
                        <InputText id="designation" class="form-control" @bind-Value="employee.Designation" />
                        <ValidationMessage For="@(() => employee.Designation)" />
                    </div>

                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect id="status" class="form-control" @bind-Value="employee.Status">
                            <option value="@EmployeeStatus.Active">Active</option>
                            <option value="@EmployeeStatus.Inactive">Inactive</option>
                        </InputSelect>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle"></i> Save
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Employee employee = new Employee();
    private string pageTitle = "Add Employee";

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            pageTitle = "Edit Employee";
            var existing = await EmployeeService.GetEmployeeByIdAsync(Id.Value);
            if (existing != null)
            {
                employee = existing;
            }
            else
            {
                NavigationManager.NavigateTo("/employees");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (Id.HasValue)
            {
                await EmployeeService.UpdateEmployeeAsync(employee);
            }
            else
            {
                await EmployeeService.CreateEmployeeAsync(employee);
            }
            NavigationManager.NavigateTo("/employees");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving employee: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/employees");
    }
}
