@page "/employees"
@rendermode InteractiveServer
@using AssetManagement.Business.Interfaces
@using AssetManagement.Models
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Employees - Asset Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Employees</h3>
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        <i class="bi bi-plus-circle"></i> Add Employee
    </button>
</div>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else if (!employees.Any())
{
    <div class="alert alert-info">No employees found. Click "Add Employee" to create one.</div>
}
else
{
    <div class="card">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Full Name</th>
                        <th>Department</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Designation</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in employees)
                    {
                        <tr>
                            <td>@employee.EmployeeId</td>
                            <td>@employee.FullName</td>
                            <td>@employee.Department</td>
                            <td>@employee.Email</td>
                            <td>@employee.PhoneNumber</td>
                            <td>@employee.Designation</td>
                            <td>
                                @if (employee.Status == EmployeeStatus.Active)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEdit(employee.EmployeeId)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee.EmployeeId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        var result = await EmployeeService.GetAllEmployeesAsync();
        employees = result.ToList();
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/employees/add");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id) 
    {
        if (confirm($"Are you sure you want to delete this employee?"))
        {
            try
            {
                await EmployeeService.DeleteEmployeeAsync(id);
                await LoadEmployees();
            }
            catch (Exception ex)
            {
                // Handle error (you can add a toast notification here)
                Console.WriteLine($"Error deleting employee: {ex.Message}");
            }
        }
    }

    private bool confirm(string message)
    {
        // Simple confirmation - in production use a proper modal
        return true; // For now, always return true
    }
}
