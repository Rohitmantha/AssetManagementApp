@page "/assets"
@rendermode InteractiveServer
@using AssetManagement.Business.Interfaces
@using AssetManagement.Models
@inject IAssetService AssetService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Assets - Asset Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Assets Inventory</h3>
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        <i class="bi bi-plus-circle"></i> Add Asset
    </button>
</div>

<!-- Filters -->
<div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Search by name or serial..." @bind="searchTerm" @bind:event="oninput" />
            </div>
            <div class="col-md-3">
                <select class="form-control" @bind="filterStatus">
                    <option value="">All Status</option>
                    <option value="0">Available</option>
                    <option value="1">Assigned</option>
                    <option value="2">Under Repair</option>
                    <option value="3">Retired</option>
                </select>
            </div>
            <div class="col-md-3">
                <input type="text" class="form-control" placeholder="Filter by type..." @bind="filterType" @bind:event="oninput" />
            </div>
            <div class="col-md-2">
                <button class="btn btn-secondary w-100" @onclick="ClearFilters">Clear Filters</button>
            </div>
        </div>
    </div>
</div>

@if (assets == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredAssets.Any())
{
    <div class="alert alert-info">No assets found.</div>
}
else
{
    <div class="card">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Serial Number</th>
                        <th>Status</th>
                        <th>Condition</th>
                        <th>Spare</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var asset in filteredAssets)
                    {
                        <tr>
                            <td>@asset.AssetId</td>
                            <td>@asset.AssetName</td>
                            <td>@asset.AssetType</td>
                            <td><code>@asset.SerialNumber</code></td>
                            <td>
                                @if (asset.Status == AssetStatus.Available)
                                {
                                    <span class="badge bg-success">Available</span>
                                }
                                else if (asset.Status == AssetStatus.Assigned)
                                {
                                    <span class="badge bg-warning">Assigned</span>
                                }
                                else if (asset.Status == AssetStatus.UnderRepair)
                                {
                                    <span class="badge bg-danger">Under Repair</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Retired</span>
                                }
                            </td>
                            <td>@asset.Condition</td>
                            <td>
                                @if (asset.IsSpare)
                                {
                                    <span class="badge bg-info">Yes</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEdit(asset.AssetId)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteAsset(asset.AssetId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Asset>? assets;
    private string searchTerm = "";
    private string filterStatus = "";
    private string filterType = "";

    private IEnumerable<Asset> filteredAssets
    {
        get
        {
            if (assets == null) return Enumerable.Empty<Asset>();

            var result = assets.AsEnumerable();

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                result = result.Where(a =>
                    a.AssetName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            if (!string.IsNullOrWhiteSpace(filterStatus))
            {
                var status = (AssetStatus)int.Parse(filterStatus);
                result = result.Where(a => a.Status == status);
            }

            if (!string.IsNullOrWhiteSpace(filterType))
            {
                result = result.Where(a => a.AssetType.Contains(filterType, StringComparison.OrdinalIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
    }

    private async Task LoadAssets()
    {
        var result = await AssetService.GetAllAssetsAsync();
        assets = result.ToList();
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/assets/add");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/assets/edit/{id}");
    }

    private async Task DeleteAsset(int id)
    {
        try
        {
            await AssetService.DeleteAssetAsync(id);
            await LoadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting asset: {ex.Message}");
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        filterStatus = "";
        filterType = "";
    }
}
